#include<cudautil.h>
#include<astutil.h>

#include<frontend/symTab.h>

#define MAXTHREADIDVAR 16

extern SymTab *symtab;

const char* dimToAxis(int dim) {
  switch(dim) {
  case 0:
    return "x";
  case 1: 
    return "y";
  case 2:
    return "z";
  default:
    return "x";
  }
}


bool isThreadId(AstNode *node, int dim) {
  if (!isStructRef(node))
    return false;
  AstNode *structName = (*node)[0];
  AstNode *fieldName = (*node)[1];

  char *comboName = (char *) malloc(sizeof(char) * MAXTHREADIDVAR);
  sprintf(comboName, "threadIdx.%s", dimToAxis(dim));
  
  bool match = idMatch(fieldName, comboName);
  free(comboName);

  return match;
}  


int lookupThreadIdinST(int dim) {
  char *comboName = (char *) malloc(sizeof(char) * MAXTHREADIDVAR);
  sprintf(comboName, "threadIdx.%s", dimToAxis(dim));
  
  int index = symtab->lookupByName(comboName);
  free(comboName);
  return index;
}


AstNode *creatThreadIdRef(int dim) {
  char *comboName = (char *) malloc(sizeof(char) * MAXTHREADIDVAR);
  sprintf(comboName, "threadIdx.%s", dimToAxis(dim));
 
  int index = symtab->lookupByName(comboName);
  if (index < 0) 
    index = symtab->insert(comboName);

  AstNode *structure = new AstLeafNode(ID_REF, index);
  AstNode *field = new AstLeafNode(ID_REF, index);

  AstNode *structNode = new AstNode(STRUCT_REF);
  structNode->addSibling(structure);
  structNode->addSibling(field);
  
  return structNode;
}

AstNode *findThreadIdFirstRef(AstNode *node, int dim) {

  if (isStructRef(node)) {
    if (isThreadId(node, dim)) {
      return node;
    }
    else 
      return NULL;
  }
  
  list<AstNode*>::iterator i;

  AstNode *foundNode;
  for(i = node->begin(); i != node->end(); i++) {
    foundNode = findThreadIdFirstRef(*i, dim);
    if (foundNode) 
      return foundNode;
  }

  list<AstNode*> *children = node->getChildren();
  for(i = children->begin(); i != children->end(); i++) {
    foundNode = findThreadIdFirstRef(*i, dim);
    if (foundNode) 
      return foundNode;
  }

  return NULL;
}
